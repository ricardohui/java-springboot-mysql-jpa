package com.example.accessingdatamysql;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/api/") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	private static final Logger logger = LoggerFactory.getLogger(MainController.class);


	@PostMapping(path = "/user") // Map ONLY POST Requests
	public @ResponseBody
	ResponseEntity<String> addNewUser(@RequestParam String name
			, @Nullable @RequestParam String email, @Nullable String nickname) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (StringUtils.isEmpty(email) || StringUtils.isBlank(email)) {
			// the spring will do the job guarding for you if you dont add @Nullable
			logger.error("Missing name or email as query param");
			return ResponseEntity
					.status(HttpStatus.BAD_REQUEST)
					.body("Missing name or email as query param");
		}

		if (nickname == null || StringUtils.isEmpty(nickname) || StringUtils.isBlank(nickname)) {
			logger.info("nickname is not provided. A default World would be used");
			nickname = "World";
		}

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		// https://www.baeldung.com/spring-response-entity
		// you dont need to cast type here as the return type of the method has done so.
		if (logger.isInfoEnabled()) {
			logger.info(String.format("Hello %s", nickname));
		}
		return new ResponseEntity<>("Created", HttpStatus.CREATED);
	}

	@GetMapping(path = "/user")
	public @ResponseBody
	Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}
